name: Publish to PyPI on Tag Push

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write



jobs:
  create-tag:
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.tag_version.outputs.new_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=${latest_tag}" >> $GITHUB_OUTPUT

      - name: Bump version and push tag
        id: tag_version
        run: |
          latest_tag=${{ steps.get_latest_tag.outputs.latest_tag }}
          latest_ver=${latest_tag#v}
          IFS='.' read -r major minor patch <<< "$latest_ver"
          new_patch=$((patch + 1))

          # Function to check if tag exists
          tag_exists() {
            git rev-parse "$1" >/dev/null 2>&1
          }

          # Find next available tag
          while true; do
            if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              new_tag="v$major.$minor.$new_patch"
            else
              new_tag="v$major.$minor.$new_patch-dev"
            fi

            if ! tag_exists "$new_tag"; then
              break
            fi
            new_patch=$((new_patch + 1))
          done

          echo "new_tag=${new_tag}" >> $GITHUB_OUTPUT
          echo "Creating new tag: $new_tag"

          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Create and push tag with error handling
          if git tag -a $new_tag -m "Release $new_tag" && git push origin $new_tag; then
            echo "Successfully created and pushed tag $new_tag"
          else
            echo "Failed to create or push tag"
            exit 1
          fi


  build-and-publish:
    needs: create-tag
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the code
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for all tags and branches

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine setuptools wheel

      # Step 4: Configure Git
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # Step 5: Build the package
      - name: Build the package
        run: |
          python -m build
          ls dist/  # Debug: list built distributions

      # Step 6: Publish to PyPI
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine check dist/*
          twine upload dist/*
